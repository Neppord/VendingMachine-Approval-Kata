diff --git a/python/return_coins.patch b/python/return_coins.patch
deleted file mode 100644
index d331648..0000000
--- a/python/return_coins.patch
+++ /dev/null
@@ -1,68 +0,0 @@
-diff --git a/python/return_coins.patch b/python/return_coins.patch
-deleted file mode 100644
-index ce49daa..0000000
---- a/python/return_coins.patch
-+++ /dev/null
-@@ -1,31 +0,0 @@
--diff --git a/python/test_vending_machine.py b/python/test_vending_machine.py
--index 2a5d600..36e5814 100644
----- a/python/test_vending_machine.py
--+++ b/python/test_vending_machine.py
--@@ -33,3 +33,12 @@ def test_accept_coins(machine: VendingMachine, printer: VendingMachinePrinter, c
--     assert machine.balance == 5
--     assert machine.coins == [5]
--     assert machine.display == "5"
--+
--+
--+def test_return_coins(machine: VendingMachine, printer: VendingMachinePrinter):
--+    # TODO: use the printer and approvaltests.verify instead of assertions
--+
--+    machine.return_coins()
--+
--+    assert machine.balance == 0
--+
--diff --git a/python/vending_machine.py b/python/vending_machine.py
--index b2337e6..505d663 100644
----- a/python/vending_machine.py
--+++ b/python/vending_machine.py
--@@ -21,3 +21,9 @@ class VendingMachine:
--             self._display_balance()
--         else:
--             self.returns.append(value)
--+
--+    def return_coins(self):
--+        self.balance = 0
--+        self.returns = self.coins
--+        self.coins = []
--+        self._display_balance()
-diff --git a/python/test_vending_machine.py b/python/test_vending_machine.py
-index 2a5d600..36e5814 100644
---- a/python/test_vending_machine.py
-+++ b/python/test_vending_machine.py
-@@ -33,3 +33,12 @@ def test_accept_coins(machine: VendingMachine, printer: VendingMachinePrinter, c
-     assert machine.balance == 5
-     assert machine.coins == [5]
-     assert machine.display == "5"
-+
-+
-+def test_return_coins(machine: VendingMachine, printer: VendingMachinePrinter):
-+    # TODO: use the printer and approvaltests.verify instead of assertions
-+
-+    machine.return_coins()
-+
-+    assert machine.balance == 0
-+
-diff --git a/python/vending_machine.py b/python/vending_machine.py
-index 34a1b39..5bbf8aa 100644
---- a/python/vending_machine.py
-+++ b/python/vending_machine.py
-@@ -21,3 +21,9 @@ class VendingMachine:
-             self._display_balance()
-         else:
-             self.returns.append(value)
-+
-+    def return_coins(self):
-+        self.balance = 0
-+        self.returns = self.coins
-+        self.coins = []
-+        self._display_balance()
diff --git a/python/test_vending_machine.py b/python/test_vending_machine.py
index 2a5d600..30a112d 100644
--- a/python/test_vending_machine.py
+++ b/python/test_vending_machine.py
@@ -33,3 +33,32 @@ def test_accept_coins(machine: VendingMachine, printer: VendingMachinePrinter, c
     assert machine.balance == 5
     assert machine.coins == [5]
     assert machine.display == "5"
+
+
+def test_select_product(machine: VendingMachine, printer: VendingMachinePrinter):
+    # TODO: use the printer and approvaltests.verify instead of assertions
+
+    machine.select_product("Cola")
+
+    assert machine.display == "PRICE $1.00"
+
+    machine.tick()
+
+    assert machine.display == "INSERT COIN"
+
+
+def test_pay_then_select_product(machine: VendingMachine, printer: VendingMachinePrinter, coins: dict):
+    # TODO: use the printer and approvaltests.verify instead of assertions
+
+    machine.insert_coin(coins["quarter"])
+    machine.insert_coin(coins["quarter"])
+    machine.insert_coin(coins["quarter"])
+    machine.insert_coin(coins["quarter"])
+    machine.select_product("Cola")
+
+    assert machine.display == "THANK YOU"
+    assert machine.dispensed_product == "Cola"
+
+    machine.tick()
+
+    assert machine.display == "INSERT COIN"
diff --git a/python/vending_machine.py b/python/vending_machine.py
index 34a1b39..53d1070 100644
--- a/python/vending_machine.py
+++ b/python/vending_machine.py
@@ -1,11 +1,14 @@
 
 class VendingMachine:
-    def __init__(self):
+    def __init__(self, selected_product=None):
         self.display = ""
         self.coins = []
         self.returns = []
         self.balance = 0
         self.accepted_coins = [5,10,25]
+        self.prices = {"Cola": 100, "Chips": 50, "Candy": 65}
+        self.selected_product = selected_product
+        self.dispensed_product = None
         self._display_balance()
 
     def _display_balance(self):
@@ -21,3 +24,30 @@ class VendingMachine:
             self._display_balance()
         else:
             self.returns.append(value)
+
+    def select_product(self, product):
+        self.selected_product = product
+        if self.balance >= self.prices[self.selected_product]:
+            self._dispense_product()
+        else:
+            cents_to_dollars = '{:,.2f}'
+            cost = self.prices[product]/100.0
+            self.display = f"PRICE ${cents_to_dollars.format(cost)}"
+
+    def _dispense_product(self):
+        self.display = "THANK YOU"
+        self.dispensed_product = self.selected_product
+        self.balance -= self.prices[self.selected_product]
+        self.coins = []
+        self.selected_product = None
+
+    def tick(self):
+        """Simulate 5 seconds passing"""
+        if "PRICE" in self.display:
+            self._display_balance()
+        elif "THANK YOU" in self.display:
+            self._display_balance()
+            self.dispensed_product = None
+            self.returns = []
+        elif self.selected_product and self.balance >= self.prices[self.selected_product]:
+            self._dispense_product()
